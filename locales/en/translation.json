{
  "name": "Sergey Pankov",
  "post": "Frontend Web-Developer",
  "aboutMe": "About me",
  "projects": "Projects",
  "contacts": "Contacts",
  "downloadCv": "Download Cv",
  "myProjects": "My projects",
  "allMyStack": "All my stack:",
  "worksInPortfolio": "Works in my portfolio:",
  "aboutMeText": "Frontend developer with 2 years of experience, including commercial experience.",
  "aboutMeText2": "I specialize in the development of user interfaces using JavaScript,TypeScript, React",
  "aboutMeText3": "I also have experience in adaptive cross-browser layout SPA and MPA withCSS, SCSS, GSAP, GULP.",
  "aboutMeText4": "I am deeply interested in information technologies and their influence on the modern world, that's why I want to be actively involved in the development of new technologies.",
  "all": "All",
  "stack": "Stack:",
  "contactMe": "You can contact me with:",
  "checkMyRepo": "You can check my repository:",
  "ecars": "Ecars is my biggest and most complex project. It took me about half a year to create it. It uses all the technologies that are currently in demand on the market: React, TypeScript, React Router, Redux Toolkit, SCSS Module, Firebase and many others. Ecars is a kind of car aggregator. Any user can go to ecars-project.ru and see the current assortment of cars. Filtering and sorting on the level of requests on the backend are realized. Also any user can put his car for sale, only registration by email, or login via Google API or sms code is required. It is also possible to edit or completely delete your car. All data is stored in Firebase database. At the moment the application is fully functional and performs all the intended functions, fully implemented layout for desktop and mobile devices, all intermediate versions are maximally simplified. ",
  "maze": "My first big and complex project that I worked on for a few months. I was tasked with creating a maze game that would implement keyboard arrow control, randomly create walls that were impossible to pass through.The biggest problem I had to face was the implementation of the walls. They are top-border or left-border divs that are generated by a random number. I had to put a lot of time into calculating the position of the walls and the paths the user could take. In the end, although not in the most concise way, the problem was solved.",
  "armstrongCss": "Same Armstrong ceiling calculator, only implemented without using Canvas. It draws td elements and colors them using CSS.The advantage of this calculator over the previous one, implemented using Canvas, is the speed of operation, and the quality of the display. The new version can render more room, does it faster, and does not blur the image as in the Canvas version.",
  "armstrongCanvas": "Armstrong Canvas This is a calculator to calculate the number of Armstrong blocks required to cover the ceiling of a roomThe user enters the dimensions of the room, the calculator calculates: The area of the room, the perimeter of the room, the required number of 60x60 cm blocks, and the size of the edge blocks that will have to be cut. Also, there is an opportunity to calculate taking into account the width of the seam between the blocks.The most important advantage of the calculator: It visually draws in reduced scale the ceiling of the room in Canvas and shows how the Armstrong blocks will lie on it. It displays both off-center, meaning that the trimmed parts of the blocks will be on one side only, and off-center, so that everything looks seven-sided.",
  "headphones": "Training project for practicing layout from Figma layout. The project is made with SCSS. Flex, transition, animation are used. Adaptive.",
  "passgen": "A training project that was done in 1 day. First introduction to TypeScript and tailwind.A simple password generator with some customization. You can set the length of the password, presence/absence of uppercase characters, numbers, special characters. Ability to quickly copy the result by clicking on the password.",
  "recording": "A training project on layout layout from Figma. Fully adaptive. Built with the help of GULP. SCSS, Flex, Grid were used.",
  "likeMe": "First commercial project. We were given a layout in Figma of a simple landings, without tablet and mobile version. It was necessary to make and adapt it for 1 day. The task was completed on time, the customer was satisfied.",
  "araney": "One of the first commercial projects. Good design with Figma but no mobile and tablet version, so we had to improvise. The biggest challenge was the 'How we work' block. When the user scrolls the page, when the 'How we work' block reaches the Header the block should scroll sideways, when it reaches the end, the normal page scrolling continues. Accordingly, when scrolling up, this block should also scroll to the other side before the page continues to scroll up.The task was completed, the customer accepted the work.",
  "rilab": "Another order, which consisted mostly of layout. This time there was a task from the template for WordPress to take some blocks with animation, and inserted into the landing of services for data recovery from the hard disk. The customer accepted the work.",
  "kema": "One of the most voluminous orders. The task was to layout one of the pages on the website, which explained the advantages of her online gym. In the beginning there was no clear layout and design, there were only examples from other foreign sites as the customer would like to see her page. When trying to build one page from 'borrowed' several written on different frameworks, encountered a lot of bugs, errors and conflicts of styles and scripts. In the end it was decided to write independently those pages that refused to work, using GSAP library to create animations.The order was delivered later than promised, but it was discussed with the customer in the process of work. The customer is completely satisfied with the work, all wishes were fulfilled."
}
